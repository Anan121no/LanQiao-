package _2018_C;

import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;

/*
 * 本题目要求你在控制台输出一个由数字组成的等腰三角形。
具体的步骤是：
先用1,2,3，…的自然数拼一个足够长的串
用这个串填充三角形的三条边。从上方顶点开始，逆时针填充。
比如，当三角形高度是8时：
       1
      2 1
     3   8
    4     1
   5       7
  6         1
 7           6
891011121314151
1
2
3
4
5
6
7
8
显示不正确时，参看：p1.png
资源约定
峰值内存消耗（含虚拟机） < 256M
CPU消耗 < 1000ms
输入格式
一个正整数n(3<n<300),表示三角形的高度
为了便于测评，我们要求空格一律用"."代替。
输出格式
用数字填充的等腰三角形。
测试样例1
Input：
5
Output：
....1
...2.1
..3...2
.4.....1
567891011
测试样例2

Input：
10

Output：
.........1
........2.2
.......3...2
......4.....2
.....5.......1
....6.........2
...7...........0
..8.............2
.9...............9
1011121314151617181
测试样例3

Input：
15

Output：
..............1
.............2.3
............3...2
...........4.....3
..........5.......1
.........6.........3
........7...........0
.......8.............3
......9...............9
.....1.................2
....0...................8
...1.....................2
..1.......................7
.1.........................2
21314151617181920212223242526
n < 300 也就是数字串长度不超过 600，可以先打个表
想用 js 打表，但怕犯规
――――――――――――――――
版权声明：本文为CSDN博主「肖有量」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qq_43449564/article/details/109007981
 */
public class _08等腰三角形 {
	static final byte[] table = { 50, 51, 52, 53, 54, 55, 56, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 49, 48, 48, 49, 48, 49, 49, 48, 50, 49, 48, 51, 49, 48, 52, 49, 48, 53, 49, 48, 54, 49, 48, 55, 49, 48, 56, 49, 48, 57, 49, 49, 48, 49, 49, 49, 49, 49, 50, 49, 49, 51, 49, 49, 52, 49, 49, 53, 49, 49, 54, 49, 49, 55, 49, 49, 56, 49, 49, 57, 49, 50, 48, 49, 50, 49, 49, 50, 50, 49, 50, 51, 49, 50, 52, 49, 50, 53, 49, 50, 54, 49, 50, 55, 49, 50, 56, 49, 50, 57, 49, 51, 48, 49, 51, 49, 49, 51, 50, 49, 51, 51, 49, 51, 52, 49, 51, 53, 49, 51, 54, 49, 51, 55, 49, 51, 56, 49, 51, 57, 49, 52, 48, 49, 52, 49, 49, 52, 50, 49, 52, 51, 49, 52, 52, 49, 52, 53, 49, 52, 54, 49, 52, 55, 49, 52, 56, 49, 52, 57, 49, 53, 48, 49, 53, 49, 49, 53, 50, 49, 53, 51, 49, 53, 52, 49, 53, 53, 49, 53, 54, 49, 53, 55, 49, 53, 56, 49, 53, 57, 49, 54, 48, 49, 54, 49, 49, 54, 50, 49, 54, 51, 49, 54, 52, 49, 54, 53, 49, 54, 54, 49, 54, 55, 49, 54, 56, 49, 54, 57, 49, 55, 48, 49, 55, 49, 49, 55, 50, 49, 55, 51, 49, 55, 52, 49, 55, 53, 49, 55, 54, 49, 55, 55, 49, 55, 56, 49, 55, 57, 49, 56, 48, 49, 56, 49, 49, 56, 50, 49, 56, 51, 49, 56, 52, 49, 56, 53, 49, 56, 54, 49, 56, 55, 49, 56, 56, 49, 56, 57, 49, 57, 48, 49, 57, 49, 49, 57, 50, 49, 57, 51, 49, 57, 52, 49, 57, 53, 49, 57, 54, 49, 57, 55, 49, 57, 56, 49, 57, 57, 50, 48, 48, 50, 48, 49, 50, 48, 50, 50, 48, 51, 50, 48, 52, 50, 48, 53, 50, 48, 54, 50, 48, 55, 50, 48, 56, 50, 48, 57, 50, 49, 48, 50, 49, 49, 50, 49, 50, 50, 49, 51, 50, 49, 52, 50, 49, 53, 50, 49, 54, 50, 49, 55, 50, 49, 56, 50, 49, 57, 50, 50, 48, 50, 50, 49, 50, 50, 50, 50, 50, 51, 50, 50, 52, 50, 50, 53, 50, 50, 54, 50, 50, 55, 50, 50, 56, 50, 50, 57, 50, 51, 48, 50, 51, 49, 50, 51, 50, 50, 51, 51, 50, 51, 52, 50, 51, 53, 50, 51, 54 };

    public static void main(String[] args) throws IOException {
        int n = nextInt(System.in);
        PrintStream out = System.out;
        int start = 0, end = n * 4 - 6, left = n - 2, space = 1;
        for (int i = 0; i <= left; i++) out.write(46);
        out.print("1\n");
        while (left > 0) {
            for (int i = 0; i < left; i++) out.write(46);
            out.write(table[start]);
            for (int i = 0; i < space; i++) out.write(46);
            out.write(table[end]);
            out.write('\n');
            space+=2;
            start++;
            left--;
            end--;
        }
        out.write(table, start, n * 2 - 1);
    }

    static int nextInt(InputStream in) throws IOException {
        int n = 0, c = in.read();
        while (c < '0' || c > '9') c = in.read();
        while (c >='0' && c <='9') {
            n = n * 10 + (c & 0xf);
            c = in.read();
        }
        return n;
    }
}
